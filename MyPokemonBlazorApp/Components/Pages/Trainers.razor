@page "/Trainers"
@rendermode InteractiveServer
@inject DataBaseContext DbContext

<h3>Trainers</h3>
<div class="row g-0">
    <div class=" col-md-12">
        <button class=" btn btn-primary float-end" @onclick="ShowAddTrainer">
            Add Trainer
        </button>
    </div>
</div>

<nav aria-label="Page navigation example">
    <ul class="pagination">
        <li class="page-item"><a class="page-link" href="#">Previous</a></li>
        <li class="page-item"><a class="page-link" href="#">1</a></li>
        <li class="page-item"><a class="page-link" href="#">2</a></li>
        <li class="page-item"><a class="page-link" href="#">3</a></li>
        <li class="page-item"><a class="page-link" href="#">Next</a></li>
    </ul>
</nav>
@if (showForm)
{
    <div class="card">
        <div class="card-body bg-light">
            <h4 class="class-title">
                @(model.Id == 0 ? "Add Trainer" : "Edit Trainer")
            </h4>
            <EditForm OnValidSubmit="Submit" EditContext="editContext">
                <DataAnnotationsValidator />
                <div class="row g-3">
                    <div class="col-md-6">
                        <label for="name" class="form-label">Name</label>
                        <InputText class="form-control" placeholder="Name" @bind-Value="Model.Name" />
                        <ValidationMessage For="@(() => Model.Name)" />
                    </div>
                    <div class="col-md-6">
                        <label for="type" class="form-label">Companion</label>
                        <InputSelect class="form-select" placeholder="Companion" @bind-Value="companionId">
                            @foreach (var pokemon in pokemons)
                            {
                                <option value="@pokemon.Id">@pokemon.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => Model.Companion)" />
                    </div>
                    <div class="col-md-12">
                        <button type="submit" class="btn btn-primary float-end">@(Model.Id == 0 ? "Add Trainer" : "Save Changes")</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}

<table class="table">
    <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">Name</th>
            <th scope="col">Companion</th>
            <th scope="col">Edit</th>
            <th scope="col">Delete</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var trainer in trainers)
        {
            <tr>
                <td>@trainer.Id</td>
                <td>@trainer.Name</td>
                <td>@trainer.Companion.Name</td>
                <td>
                    <button class="btn btn-success" @onclick="() => Edit(trainer)">Edit</button>
                </td>
                <td>
                    <button class="btn btn-danger" @onclick="() => Delete(trainer)">Delete</button>
                </td>

            </tr>
        }
    </tbody>
</table>
@code {
    [Parameter]

    public EventCallback<bool> OnSaved { get; set; }

    private List<Trainer>? trainers;
    private EditContext editContext;
    private Trainer model;
    private List<Pokemon> pokemons;
    private bool showForm;
    private int companionId;

    private void ShowAddTrainer()
    {
        model = new Trainer();
        editContext = new EditContext(model);
        showForm = true;
    }

    private void Edit(Trainer trainer)
    {
        model = trainer;
        editContext = new EditContext(model);
        showForm = true;
    }

    private async Task Submit()
    {

        Model.Companion = pokemons.Single(p => p.Id == companionId);

        if (model.Id == 0)
            DbContext.Trainers.Add(model);
        else
            DbContext.Trainers.Update(model);

        await DbContext.SaveChangesAsync();
        await Refresh();

       
    }

    protected override async Task OnInitializedAsync()
    {
        await Refresh();

        pokemons = await DbContext.Pokemons.OrderBy(p => p.Name).ToListAsync();
    }

    private async Task Refresh()
    {
        model = new Trainer();
        editContext = new EditContext(model);
        trainers = await DbContext.Trainers.Include(t => t.Companion).ToListAsync();
        pokemons = await DbContext.Pokemons.ToListAsync();
    }

    private async Task Delete(Trainer trainer)
    {
        DbContext.Trainers.Remove(trainer);
        await DbContext.SaveChangesAsync();
        await Refresh();
    }
    public Trainer Model
    {
        get
        {
            return model;
        }
        set
        {
            model = value ?? new Trainer();
            if (model.Companion is null)
                model.Companion = new Pokemon();
            companionId = model.Companion.Id;
            editContext = new(model);
        }
    }
   
    

}

